/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2023-08-19 12:17:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import model.categories.*;
import model.Model;
import model.ModelFactory;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("model.categories");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Objects");
    _jspx_imports_classes.add("model.ModelFactory");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("model.Model");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"index.css?v=1.4\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    ");
 Model model = ModelFactory.getModel(); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <header>\r\n");
      out.write("        <h1>All categories</h1>\r\n");
      out.write("        <form id=\"searchForm\" action=\"searchElement.html\" method=\"POST\" onsubmit=\"return validateInput()\">\r\n");
      out.write("            <div class=\"search-note\">Note: Search Category: \"C\" + category id -> to category page<br>     Search Product: \"C\" + category id + \"P\" + product id-> to product loaction in the categpory page</div>\r\n");
      out.write("            <input class=\"header-search\" type=\"text\" name=\"searchQuery\" placeholder=\"Enter correct search pattern...\" required>\r\n");
      out.write("            <input class=\"header-search-submit\" type=\"submit\" name=\"Search\" value=\"Search\">\r\n");
      out.write("        </form>\r\n");
      out.write("        ");
 String searchResult = (String) request.getAttribute("searchResult");
        if (searchResult == "1") { 
      out.write("\r\n");
      out.write("        <div class=\"search-no-list\">No Result Found</div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </header>\r\n");
      out.write("\r\n");
      out.write("    <!-- Main section -- categories -->\r\n");
      out.write("    <main>\r\n");
      out.write("        <!-- add category -->\r\n");
      out.write("        <div class=\"add-list-button-div\">\r\n");
      out.write("            <button class=\"add-item\">Add Category</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"modal\" style=\"position: absolute; z-index: 5;\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <h2>Add Category</h2>\r\n");
      out.write("                <form action=\"addCategory.html\" method=\"POST\">\r\n");
      out.write("                    <label for=\"item-content\">Category Name: </label>\r\n");
      out.write("                    <input type=\"text\" id=\"item-content\" name=\"addCategoryName\">\r\n");
      out.write("                    <label for=\"list-id\" name=\"cateID\">Category ID: ");
 String cateID = model.getMaxCategoryID() + ""; out.print(cateID); 
      out.write("</label>\r\n");
      out.write("                    <button class=\"cancel\" type=\"cancel\">Cancel</button>\r\n");
      out.write("                    <input type=\"submit\" class=\"submit\" value=\"Add\">\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- all categories -->\r\n");
      out.write("        <div class=\"content-container\">\r\n");
      out.write("            ");
 
            List<CategoryProducts> cates = (List<CategoryProducts>) request.getAttribute("categories");
               if (cates != null) {
                int thisCateID;
               for(CategoryProducts thisCategory : cates) { 
                thisCateID = thisCategory.getID();
                
      out.write("\r\n");
      out.write("                <div class=\"content-block\">\r\n");
      out.write("                    <a href=\"categoryProduct.html?cateid=");
      out.print( thisCategory.getID() );
      out.write("\" class=\"content-block-a\">\r\n");
      out.write("                        <div class=\"block-name\">");
      out.print( thisCategory.getName() );
      out.write("</div>\r\n");
      out.write("                        <div class=\"block-info\">");
      out.print( thisCategory.getProducts().size() );
      out.write(" products</div>\r\n");
      out.write("                        <div class=\"block-actions\">\r\n");
      out.write("                            <!-- delete category -->\r\n");
      out.write("                            <a href=\"#\" class=\"list-delete\" data-cateID-delete=\"");
      out.print( thisCateID );
      out.write("\">Delete</a>\r\n");
      out.write("                            <div class=\"delete-page\">\r\n");
      out.write("                                <div class=\"delete-page-content\">\r\n");
      out.write("                                    <h3>Are you sure to delete this category?</h3>\r\n");
      out.write("                                    <div class=\"list-delete-note\">Note: All the products in this category will also be deleted!</div>\r\n");
      out.write("                                    <form action=\"deleteCategory.html\" method=\"POST\">\r\n");
      out.write("                                        <input type=\"hidden\" name=\"deleteCategoryID\" id=\"deleteCategoryID\" value=\"\">\r\n");
      out.write("                                        <input type=\"submit\" class=\"delete-submit\" value=\"Delete\">\r\n");
      out.write("                                        <button class=\"delete-cancel\" type=\"cancel\">Cancel</button>\r\n");
      out.write("                                    </form>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("\r\n");
      out.write("                            <!-- rename category -->\r\n");
      out.write("                            <a href=\"#\" class=\"list-rename\" data-cateID=\"");
      out.print( thisCateID );
      out.write("\">Rename</a>\r\n");
      out.write("                            <div class=\"rename-page\">\r\n");
      out.write("                                <div class=\"rename-page-content\">\r\n");
      out.write("                                    <h2>Rename this Category:</h2>\r\n");
      out.write("                                    <form action=\"renameCategory.html\" method=\"POST\">\r\n");
      out.write("                                        <label for=\"new-cate-name\">Input New Category Name:</label>\r\n");
      out.write("                                        <input type=\"text\" id=\"new-cate-name\" name=\"new-cate-name\" placeholder=\"Category Name should be unique\">\r\n");
      out.write("                                        <button class=\"rename-cancel\" type=\"cancel\">Cancel</button>\r\n");
      out.write("                                        <input type=\"hidden\" name=\"renameCateID\" id=\"renameCateID\" value=\"\">\r\n");
      out.write("                                        <input type=\"submit\" class=\"rename-submit\" value=\"Rename\">\r\n");
      out.write("                                    </form>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </div>\r\n");
      out.write("            ");
 }} 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </main>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // search\r\n");
      out.write("        function validateInput() {\r\n");
      out.write("            var input = document.forms[\"searchForm\"][\"searchQuery\"].value;\r\n");
      out.write("            var cateIds = [");
      out.print( String.join(",", model.GetALLCategoryID()) );
      out.write("];\r\n");
      out.write("            var productIds = [");
      out.print( String.join(",", model.GetALLProductID()) );
      out.write("];\r\n");
      out.write("            var regex1 = /^C\\d+(P\\d+)?$/;\r\n");
      out.write("            var regex2 = /^C\\d+$/;\r\n");
      out.write("\r\n");
      out.write("            if (!regex1.test(input) && !regex2.test(input)) {\r\n");
      out.write("                alert(\"Invalid input. Please enter a valid search pattern.\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            if (str.indexOf(\"I\") === -1) {\r\n");
      out.write("                var cateId = parseInt(input.substring(1));\r\n");
      out.write("                if (!cateIds.includes(cateId)) {\r\n");
      out.write("                    alert(\"Category ID not found.\");\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                var cateId = parseInt(input.substring(1, input.indexOf(\"P\")));\r\n");
      out.write("                var productId = parseInt(input.substring(input.indexOf(\"P\") + 1));\r\n");
      out.write("                if (!cateIds.includes(cateId) || !productIds.includes(productId)) {\r\n");
      out.write("                    alert(\"Product ID not found.\");\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            return true;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // view list\r\n");
      out.write("        function deleteList(cateID) {\r\n");
      out.write("            window.location.href = \"index?cateid=\" + cateID;\r\n");
      out.write("        }\r\n");
      out.write("        function renameList(cateID) {\r\n");
      out.write("            window.location.href = \"index?cateid=\" + cateID;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // add list\r\n");
      out.write("        document.querySelector('.add-item').addEventListener('click', function(e) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            document.querySelector('.modal').style.display = 'flex';\r\n");
      out.write("        });\r\n");
      out.write("        document.querySelector('.modal .cancel').addEventListener('click', function(e) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            document.querySelector('.modal').style.display = 'none';\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // rename list\r\n");
      out.write("        var renamecates = document.querySelectorAll(\".list-rename\");\r\n");
      out.write("        for (var i = 0; i < renamecates.length; i++) {\r\n");
      out.write("            renamecates[i].addEventListener(\"click\", function() {\r\n");
      out.write("                document.querySelector('.rename-page').style.display = 'flex';\r\n");
      out.write("            })\r\n");
      out.write("        };\r\n");
      out.write("        const renameButtons = document.querySelectorAll('.list-rename');\r\n");
      out.write("        renameButtons.forEach(button => {\r\n");
      out.write("            button.addEventListener('click', (event) => {\r\n");
      out.write("                const cateID = button.getAttribute('data-cateID');\r\n");
      out.write("                const hiddenInput = document.querySelector('#renameCateID');\r\n");
      out.write("                console.log(\"hiddenInput.value before: \", hiddenInput.value);\r\n");
      out.write("                hiddenInput.value = cateID;\r\n");
      out.write("                console.log(\"hiddenInput.value after: \", hiddenInput.value);\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("        document.querySelector('.rename-page .rename-cancel').addEventListener('click', function(e) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            document.querySelector('.rename-page').style.display = 'none';\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // delete list\r\n");
      out.write("        var deletecates = document.querySelectorAll(\".list-delete\");\r\n");
      out.write("        for (var i = 0; i < deletecates.length; i++) {\r\n");
      out.write("            deletecates[i].addEventListener(\"click\", function() {\r\n");
      out.write("                document.querySelector('.delete-page').style.display = 'flex';\r\n");
      out.write("            })\r\n");
      out.write("        };\r\n");
      out.write("        const deleteButtons = document.querySelectorAll('.list-delete');\r\n");
      out.write("        deleteButtons.forEach(button => {\r\n");
      out.write("            button.addEventListener('click', (event) => {\r\n");
      out.write("                const cateID2 = button.getAttribute('data-cateID-delete');\r\n");
      out.write("                const hiddenInput2 = document.querySelector('#deleteCategoryID');\r\n");
      out.write("                hiddenInput2.value = cateID2;\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("        document.querySelector('.delete-page .delete-cancel').addEventListener('click', function(e) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            document.querySelector('.delete-page').style.display = 'none';\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
